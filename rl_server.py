import zmq
import json
import numpy as np
from stable_baselines3 import PPO

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
model = PPO.load("ppo_cross_final.zip", device="cpu")
model.policy.eval()

# –ü–æ—Ä—è–¥–æ–∫ –≥—Ä—É–ø–ø –¥–ª—è –Ω–∞–±–ª—é–¥–µ–Ω–∏—è
GROUPS = ["cars_NS", "cars_EW", "peds_NS", "peds_EW"]

def make_obs(counts: dict) -> np.ndarray:
    # –¥–æ–±–∞–≤–ª—è–µ–º –¥–≤–∞ –Ω—É–ª—è –¥–ª—è wait_ns –∏ wait_ew
    return np.array([counts[g] for g in GROUPS] + [0, 0], dtype=np.float32)

# –§–∞–∑—ã: –ø—Ä–∏–º–µ—Ä —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è action ‚Üí —Å–ø–∏—Å–æ–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö IDs
phase_map = {
    0: ["light_na",    "light_p_na"],
    1: ["light_pol",   "light_p_pol"],
    2: ["light_ylna",  "light_p_ylna"],
    3: ["light_ylpol", "light_p_ylpol"]
}

# –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–≤–µ—Ç–æ—Ñ–æ—Ä–æ–≤
all_lights = [
    "light_na","light_ylna","light_p_na","light_p_ylna",
    "light_pol","light_ylpol","light_p_pol","light_p_ylpol"
]

def main():
    ctx = zmq.Context()
    sock = ctx.socket(zmq.REP)
    sock.bind("tcp://*:5556")
    print("Controller started on port 5556")

    while True:
        msg = sock.recv_string()
        print("‚îÄ‚îÄ raw payload:", msg)
        try:
            data = json.loads(msg)
            counts = data["counts"]
            # –ø–µ—á–∞—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Ä–∞–∑–±–æ—Ä–∞
            print("‚Üí parsed counts:", counts)
        except Exception as e:
            print("‚ùå JSON parse error:", e)
            sock.send_string(json.dumps({"error":"bad json"}))
            continue   # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Å—Ç–∞–≤—à—É—é—Å—è –ª–æ–≥–∏–∫—É –∏ –∂–¥—ë–º —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—Ä–æ—Å

        # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö —Å—á—ë—Ç—á–∏–∫–æ–≤
        print("üì• Received counts:", counts)

        obs = make_obs(counts)
        action, _ = model.predict(obs, deterministic=True)
        phase = int(action)

        # 1) –±–∞–∑–æ–≤—ã–π –º–∞–ø–ø–∏–Ω–≥
        open_ids = set(phase_map[phase])

        # 2) ¬´—Ä–∞—Å–∫—Ä—ã—Ç–∏–µ¬ª –ø–∞—Ä—ã –∂—ë–ª—Ç—ã–π + –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–π –ø–µ—à–µ—Ö–æ–¥–Ω—ã–π
        if "light_na" in open_ids:
            open_ids.update(["light_ylna", "light_p_pol", "light_p_ylpol"])
        elif "light_pol" in open_ids:
            open_ids.update(["light_ylpol", "light_p_na", "light_p_ylna"])

        # 3) –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –µ–¥–∏–Ω–∏—á–Ω—ã–µ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ –ø–æ—Ä–æ–≥–∞–º
        if counts["peds_NS"] > 7:
            open_ids.update(["light_p_na", "light_p_ylna"])
        if counts["peds_EW"] > 7:
            open_ids.update(["light_p_pol", "light_p_ylpol"])
        if counts["cars_NS"] > 5:
            open_ids.update(["light_na", "light_ylna"])
        if counts["cars_EW"] > 5:
            open_ids.update(["light_pol", "light_ylpol"])

        # 4) —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        response_lights = []
        for lid in all_lights:
            state = "open" if lid in open_ids else "close"
            response_lights.append({"id": lid, "state": state})


        # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥ –ø–æ –∫–∞–∂–¥–æ–º—É —Å–≤–µ—Ç–æ—Ñ–æ—Ä—É
        print(f"üîÑ Chosen phase: {phase}")
        for ld in response_lights:
            print(f"    {ld['id']}: {ld['state']}")

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞
        # –ø—Ä–∏–º–µ—Ä: –µ—Å–ª–∏ –º–∞–ª–æ –º–∞—à–∏–Ω ‚Äî –±—ã—Å—Ç—Ä–µ–µ, –º–Ω–æ–≥–æ ‚Äî –¥–æ–ª—å—à–µ
        total_cars = counts["cars_NS"] + counts["cars_EW"]
        # dur = max(1.0, min(5.0, 10.0 / (1 + total_cars)))
        dur = 7.0
        resp = {"lights": response_lights, "duration": dur}
        sock.send_string(json.dumps(resp))

if __name__ == "__main__":
    main()
